name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  packages: write

jobs:
  build-test-lint:
    name: Lint, Test, and Build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Lint code
        run: flake8 sample_app tests

      - name: Run tests with coverage
        run: |
          pytest --cov=sample_app \
                 --cov-report=term-missing \
                 --cov-report=xml:coverage.xml \
                 --junitxml=junit.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit.xml
            coverage.xml

  docker:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: [build-test-lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      - name: Build Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/sample_app:${{ github.ref_name }}-${{ github.sha }}
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t $IMAGE .

      - name: Push Docker image
        run: docker push ${{ env.IMAGE }}

      - name: Security scan (Trivy)
        uses: aquasecurity/trivy-action@0.25.0
        with:
          image-ref: ${{ env.IMAGE }}
          format: table
          exit-code: 0

  pr-comment:
    name: Comment PR Summary
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [docker]

    steps:
      - name: Download test artifact for Python 3.12
        uses: actions/download-artifact@v4
        with:
          name: test-results-3.12

      - name: Extract coverage and test results
        id: results
        run: |
          COV=$(grep -oPm1 "(?<=<coverage.*line-rate=\")[0-9.]+" coverage.xml || echo "N/A")
          TESTS=$(grep -oPm1 "(?<=tests=)[0-9]+" junit.xml || echo "N/A")
          FAILURES=$(grep -oPm1 "(?<=failures=)[0-9]+" junit.xml || echo "N/A")
          echo "COVERAGE=$COV" >> $GITHUB_ENV
          echo "TESTS=$TESTS" >> $GITHUB_ENV
          echo "FAILURES=$FAILURES" >> $GITHUB_ENV

      - name: Post PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "CI Summary"
          message: |
            **CI Pipeline completed successfully**

            - Python versions tested: 3.10, 3.11, 3.12  
            - Coverage: ${{ env.COVERAGE }}  
            - Tests run: ${{ env.TESTS }} | Failures: ${{ env.FAILURES }}  
            - Docker image: `${{ env.IMAGE }}`  
            - [Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
