name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  packages: read

jobs:
  deploy:
    name: Mock Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      - name: Define image tag
        id: vars
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/sample_app:${{ github.event.workflow_run.head_branch || 'main' }}-${{ github.event.workflow_run.head_sha }}
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Pull image
        run: docker pull ${{ env.IMAGE }}

      - name: Mock deployment (run container)
        run: |
          echo "Running mock deployment..."
          docker run --rm ${{ env.IMAGE }} 2 3

      - name: Download CI artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results-3.12
          workflow: CI
          run-id: ${{ github.event.workflow_run.id }}

      - name: Extract coverage and test results
        id: results
        run: |
          COV=$(grep -oPm1 "(?<=<coverage.*line-rate=\")[0-9.]+" coverage.xml || echo "N/A")
          TESTS=$(grep -oPm1 "(?<=tests=)[0-9]+" junit.xml || echo "N/A")
          FAILURES=$(grep -oPm1 "(?<=failures=)[0-9]+" junit.xml || echo "N/A")
          echo "COVERAGE=$COV" >> $GITHUB_ENV
          echo "TESTS=$TESTS" >> $GITHUB_ENV
          echo "FAILURES=$FAILURES" >> $GITHUB_ENV

      - name: Comment PR
        if: ${{ github.event.workflow_run.event == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "CD Summary"
          message: |
            **Mock Deployment completed successfully**

            - Docker image: `${{ env.IMAGE }}`
            - Tests run: ${{ env.TESTS }} | Failures: ${{ env.FAILURES }}
            - Coverage: ${{ env.COVERAGE }}
            - Command: `docker run --rm ${{ env.IMAGE }} 2 3`
            - Status: Success
